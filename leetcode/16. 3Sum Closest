16. 3Sum Closest

题目：Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

思路：思路和3sum一样，通过分解成2sum进行求解。

代码：
int threeSumClosest(vector<int>& nums, int target) {
        if(nums.size() <= 0){
            return 0;
        }
        int n = nums.size() - 2, flag = 0;
        sort(nums.begin(), nums.end());
        int min = INT_MAX;
        for(int i = 0; i < n; i++){
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            int m = twoSumCloset(nums, i, target - nums[i]);
            //这里最近的值要用绝对值来表示，即路径
            if(abs(m) < min){
                min = abs(m);
                flag = m;
            }
        }
        return target - flag;
    }

    int twoSumCloset(vector<int>& nums, int index, int target){
        int left = index + 1, right = nums.size() - 1, min = INT_MAX, flag = 0;
        while(left < right){
            int t = target - (nums[left] + nums[right]);
            if(t < 0){
                right--;
            }else if(t > 0){
                left++;
            }else{
                return t;
            }
            //这里最近的值要用绝对值来表示，即路径
            if(abs(t) < min){
                min = abs(t);
                flag = t;
            }
        }
        return flag;
    }
