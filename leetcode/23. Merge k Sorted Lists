23. Merge k Sorted Lists

题目：Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

思路：前面我们实现过两个链表的排序（见题20），然后用类似二分归并的方法进行迭代。

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() <= 0)
            return NULL;
        int end = lists.size() - 1;
        //二分迭代
        while(end > 0){
            int begin = 0;
            while(begin < end){
                lists[begin] = mergeTwoLists(lists[begin], lists[end]);
                begin++;
                end--;
            }
        }
        return lists[0];
    }

    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        else if(l2 == NULL)
            return l1;
        else if(l1 == NULL && l2 == NULL)
            return NULL;
        ListNode head = {0};
        head.next = NULL;
        ListNode* p = &head;
        while(l1 != NULL && l2 != NULL){
            if(l1->val <= l2->val){
                p->next = l1;
                l1 = l1->next;
            }else{
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        if(l1 != NULL)
            p->next = l1;
        else if(l2 != NULL)
            p->next = l2;
        return head.next;
    }
};
